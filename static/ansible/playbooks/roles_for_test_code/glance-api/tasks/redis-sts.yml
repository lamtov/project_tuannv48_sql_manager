# kubectl delete -f redis-sts.yaml -n thodv
# kubectl create namespace thodv
# kubectl apply -f redis-sts.yaml -n thodv
# kubectl get pods -n thodv

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: data
  namespace: thodv
  labels:
    type: local
spec:
  storageClassName: thodv1
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/thodv/data"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-clustera
  namespace: thodv
spec:
  type: NodePort
  ports:
  - port: 6379
    nodePort: 30100
    targetPort: 6379
    name: client
  - port: 16379
    nodePort: 30137
    targetPort: 16379
    name: gossip
  selector:
    app: redis-clustera

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster
  namespace: thodv
data:
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/root/thodv/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /root/thodv/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rediscluster
  namespace: thodv
spec:
  serviceName: redis-clustera
  replicas: 1
  selector:
    matchLabels:
      app: redis-clustera
  template:
    metadata:
      labels:
        app: redis-clustera
    spec:
      nodeName: vocs-test-2
      containers:
      - name: redis-server
        image: docker-registry:4000/redis_508
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        #command: [" bash /root/thodv/update-node.sh"]
        #args: ["-c", "redis-server  /root/thodv/redis-5.0.8/redis.conf"]

        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: conf
          mountPath: /root/thodv
          readOnly: false
        #- name: data
         # mountPath: /root/thodv
        #  readOnly: false
      volumes:
      - name: conf
        configMap:
          name: redis-cluster
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
